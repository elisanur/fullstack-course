{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Button","country","setFilter","console","log","onClick","name","Country","Countries","countries","map","key","Languages","languages","language","Language","Weather","weather","length","current","temperature","wind_speed","App","useState","filter","setCountries","setWeather","useEffect","axios","get","then","response","data","searchWeather","city","filterResults","toLowerCase","includes","value","onChange","event","target","capital","population","src","flag","width","alt","rows","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51a7aa79.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios'\nimport './App.css';\n\nconst Button = ({ country, setFilter }) => {\n  console.log('menee Buttoniin')\n\n  return (\n    <button\n      onClick={() => setFilter(country.name)}>\n      show\n    </button>\n  )\n}\n\n\nconst Country = ({ country, setFilter }) => {\n  console.log('menee Countryyn')\n  return (\n    <li>{country.name} <Button country={country} setFilter={setFilter} /> </li>\n  )\n}\n\nconst Countries = ({ countries, setFilter }) => {\n\n  console.log('Countries...')\n\n  const rows = () => countries.map(country =>\n    <Country\n      key={country.name}\n      country={country}\n      setFilter={setFilter}\n    />)\n\n  return (\n    <ul>{rows()}</ul>\n  )\n}\n\nconst Languages = ({ country }) => {\n  console.log('in Languages...')\n  const languages = country.languages.map(\n    language =>\n      <Language\n        language={language.name}\n        key={language.name}\n      />\n  )\n  return (\n    <ul>{languages}</ul>\n  )\n}\n\nconst Language = ({ language }) => {\n  console.log('in Language...')\n  return (\n    <li>{language}</li>\n  )\n}\n\nconst Weather = ({ weather }) => {\n  console.log('in Weather...', weather)\n  if (weather.length === 0)\n    return null\n\n  return (\n    <div>\n      <p>temperature: {weather.current.temperature} c</p>\n      <p>wind: {weather.current.wind_speed} km/h</p>\n    </div>\n  )\n}\n\nconst WeatherInfo = ({ searchWeather, city }) => {\n  searchWeather(city)\n  return (<p></p>)\n}\n\nfunction App() {\n\n  const [filter, setFilter] = useState('')\n  const [countries, setCountries] = useState([])\n  const [weather, setWeather] = useState([])\n\n  useEffect(() => {\n    axios\n      .get('https://restcountries.eu/rest/v2/all')\n      .then(response => {\n        setCountries(response.data)\n      })\n  }, [])\n\n\n\n  const searchWeather = ({ city }) => {\n    if (weather.length !== 0 && weather.city == city)\n      return null\n\n    axios\n      .get(`http://api.weatherstack.com/current?access_key=d03a86202c80d74d441b227812ee67ec&query=${city}`)\n      .then(response => {\n        console.log('response data', response.data)\n        setWeather({...response.data, city})\n      })\n      .then(() => {\n        return (\n          <Weather weather={weather} />\n        )\n      })\n\n    console.log('weather...', weather)\n\n\n  }\n\n\n  const handleFilterChange = (event) => setFilter(event.target.value)\n\n  const filterResults = countries\n    .filter(country => country.name.toLowerCase().includes(filter.toLowerCase()))\n\n  const rows = () => {\n    if (filterResults.length > 10) {\n      return <p>Too many matches, specify another filter</p>\n    } else if (filterResults.length === 1) {\n      const country = filterResults[0]\n      const city = country.capital\n      console.log('city...', city)\n      searchWeather({ city })\n      return (\n        <div>\n          <h1>{country.name}</h1>\n\n          <p>capital {country.capital}\n            <br />population {country.population}</p>\n\n          <h2>languages</h2>\n          <Languages country={country} />\n          <p></p>\n          <img src={country.flag} width='300' alt='' ></img>\n          <p>Weather in {city}</p>\n          <Weather weather={weather} />\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <Countries countries={filterResults} setFilter={setFilter} />\n        </div>\n      )\n    }\n  }\n\n  return (\n\n    <div>\n      <p>\n        Moi\n    </p>\n\n      <form>\n        <div>find countries:\n        <input value={filter}\n            onChange={handleFilterChange} />\n        </div>\n      </form>\n      <div>{rows()}</div>\n\n    </div>\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}